{"name":"Monjo.github.io","tagline":"Monjo Homepage","body":"# Monjo!\r\n\r\n[![Build Status](https://travis-ci.org/rdllopes/monjo.png?branch=master)](https://travis-ci.org/rdllopes/monjo)\r\n\r\nMonjo is a lightweight type-safe library for mapping Java objects to/from MongoDB:\r\n\r\n* Easy to use, and very lightweight\r\n* Type-safe Query support\r\n* Annotations describe mapping behavior; there are no XML files.\r\n* Extensions: Validation (jsr330), and SLF4J Logging\r\n\r\n* Standard Mapping: use a set of rules for determining the physical fields and collections \r\n names given the information in the mapping  document (ex: naming strategy prefers\r\n embedded underscores to mixed case names)\r\n* Javabeans: accessors and mutators are always used to infer fields \r\n\r\n        @Entity(\"professionals\")\r\n        class Employee implements IdentificableDocument<ObjectId>{\r\n          ObjectId id; // auto-generated, if not set (see ObjectId)\r\n          String firstName, lastName; // value types are automatically persisted\r\n          Long salary = null; // only non-null values are stored \r\n\r\n          Address address; // by default fields are embedded\r\n\r\n          @ReferenceKey<Employee> manager; //references can be saved without automatic loading\r\n\r\n          List<Employee> underlings = new ArrayList<Employee>(); \r\n             // by default, use DBList to persist inner collections\r\n\r\n          @Indexed boolean active = false; //fields can be indexed for better performance\r\n          @Transient int notStored; //fields can be ignored (no load/save)\r\n          transient boolean stored = true; //not @Transient, will be ignored by Serialization/GWT for example.\r\n        }\r\n\r\nSpecial features\r\n----------------\r\n\r\n* Find By Example (find a object using any field, maybe an inner inner inner ... object )\r\n\r\n    \tPojoWithListInnerObject pojo = PojoBuilder.createMegaZordePojo();\r\n    \tMonjo<ObjectId, PojoWithListInnerObject> monjo = new Monjo<ObjectId, PojoWithListInnerObject>(getMongoDB(), PojoWithListInnerObject.class);\r\n    \tmonjo.removeAll();\r\n    \tmonjo.insert(createMegaZordePojo);\r\n    \tpojo.setId(null);\r\n    \tList<Category> categories = pojo.getCategories();\r\n    \tCategory category = categories.get(0);\r\n    \tcategory.setName(null);\r\n    \tPojoWithListInnerObject result = pojongo.findByExample(pojo.toList().get(0);\r\n\r\n* Cursor (select page of selection, sort and so on) \r\n\r\n        List<SimplePOJO> list = monjo.find().limit(5).toList();\r\n \r\n* Update inner Objects\r\n \r\n     \t monjo.<Category> updateInnerObject(\"categories\", category, pojo);\r\n\r\n\r\n* Does not store Null/Empty values (by default).\r\n* GWT support (entities are just POJOs) -- (GWT ignores annotations)\r\n\r\n\r\nNote: @Reference will not save objects, just a reference to them; You must save them yourself. \r\n\r\nThis library is currently at a very early development stage.\r\n","google":"UA-4907196-4","note":"Don't delete this file! It's used internally to help with page regeneration."}